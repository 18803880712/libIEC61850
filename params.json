{"name":"Libiec61850","tagline":"open source library for IEC 61850","body":"README:\r\n-------\r\n\r\nThis file is part of the documentation of libiec61850.\r\n\r\nBuild Status:\r\n- [![Build Status](https://travis-ci.org/careychow/libIEC61850.png?branch=master)](https://travis-ci.org/careychow/libIEC61850)\r\n\r\nContent:\r\n- Overview\r\n- Building and running the example server\r\n- Building on Windows with GOOSE support\r\n- Implementing your own IEC61850 MMS devices\r\n\r\nOverview\r\n---------\r\n\r\nlibiec61850 is an open-source (GPLv3) implementation of an IEC 61850 client and server library. It is implemented in C to provide maximum portability. It can be used to implement IEC 61850 compliant client and server applications on embedded systems and PCs running Linux and Windows. Included is a set of simple example applications that can be used as a starting point to implement your own IEC 61850 compliant devices or to communicate with IEC 61850 devices.\r\n\r\nThe library implements parts of the IEC 61850 specification on top of the MMS mapping. It provides the MMS protocol stack on top of TCP/IP.\r\n\r\nThe goal of this project is to provide an implementation that can run on memory constrained microcontrollers. But currently the library only runs on embedded linux systems as well as Desktop PCs running Linux or Windows.\r\n\r\nBuilding and running the examples\r\n----------------------------------------\r\n\r\nIn the project root directoy type\r\n\r\n> make examples\r\n\r\nIf the build succeeds you can find a few binary files in the projects root directory. You can also find a binary version of the library (\"libiec61850.a\") in the \"build\" directory.\r\n\r\nRun the sample applications in the example folders. E.g.:\r\n\r\n> cd examples/server_example1\r\n> sudo ./server_example1\r\n\r\non the Linux command line.\r\n\r\nThe example server is tested against the openIEC61850 client example. You can find and download openIEC61850 a Java implementation of IEC 61590 MMS for client and server applications at http://www.openmuc.org.\r\n\r\nBuilding on windows with GOOSE support\r\n---------------------------------------\r\n\r\nTo build the library and run libiec61850 applications with GOOSE support on Windows (7/8) the use of a third-party library (winpcap) is required. This is necessary because current versions of Windows have no working support for raw sockets. You can download winpcap here (http://www.winpcap.org).\r\n\r\n1. Download and install winpcap. Make sure that the winpcap driver is loaded at boot time (you can choose this option at the last screen of the winpcap installer).\r\n2. Reboot the system (you can do this also later, but you need to reboot or load the winpcap driver before running any llibiec61850 applications that use GOOSE).\r\n3. Download the winpcap developers pack from here (http://www.winpcap.org/install/bin/WpdPack_4_1_2.zip)\r\n4. Unpack the zip file. Copy the folders Lib and Include from the WpdPack directory in the third_party/winpcap directory of libiec61850\r\n\r\nBuilding with the cmake build system\r\n-------------------------------------\r\n\r\nWith the help of the cmake build system it is possible to create platform independet project descriptions and let cmake create specific project or build files for other tools like Make or Visual Studio.\r\n\r\nIf you have cmake installed fire up a command line (cmd.exe) and create a new subdirectory in the libiec61850-0.x folder. Change to this subdirectory. Then you can invoke cmake. As an command line argument you have to supply a \"generator\" that is used by cmake to create the project file for the actual build tool (in our case Visual Studio).\r\n\r\ncmake -G \"Visual Studio 11\" ..\r\n\r\nwill instruct cmake to create a \"solution\" for Visual Studio 2012. To do the same thing for Visual Studio 2010 type\r\n\r\ncmake -G \"Visual Studio 10\" ..\r\n\r\nNote: The \"..\" at the end of the command line tells cmake where to find the main build script file (called CMakeLists.txt). This should point to the folder libiec61850-0.x which is in our case the parent directory (..).\r\n\r\n\r\nImplementing your own IEC61850 MMS server devices\r\n--------------------------------------------------\r\n\r\nUntil now libiec61850 uses a static server model. That means that the IEC61850 data model is not generated at runtime by reading an ICD file, but by converting an ICD file to static C data structures at compile time.\r\n\r\nTo provide your own IEC 61850 compliant device model a tool is provided that translates an IED file to C code that can be compiled into the server application.\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}